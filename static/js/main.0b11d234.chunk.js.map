{"version":3,"sources":["../../src/Schema/type.js","../../src/Schema/schema.js","../../src/DynamicForm/TextyForm.js","../../src/util/index.js","../../src/DynamicForm/RepeatableForm.js","../../src/DynamicForm/NestedForm.js","../../src/DynamicForm/NodeForm.js","../../src/index.js","../../src/DynamicForm/index.js","components/FormExample.js","components/CodeExample.js","App.js","index.js"],"names":["DynamicFormType","text","number","nested","repeatable","schema","sch","expandedSch","Object","getExpandedSchemaFromKeyAndSchema","key","schemaForKey","type","getTypeOfSchemaFromSchema","label","getLabelFromKeyAndSchema","placeholder","defaultValue","getDefaultValueFromKeyAndSchema","getSubSchemaFromSchema","Array","TextyFormType","StringForm","onChange","NumberForm","TextyForm","useState","className","value","e","newValue","parsedValue","parseInt","setValue","changeValue","isFunction","func","prefix","Date","timeToFireAfter","setTimeout","keyIndex","ReapeatableForm","valueContainer","useRef","keyPrefix","util","addForm","newKey","setForms","changeValueForKey","onDelete","removeValueForKey","oldForms","x","deleteFormWithKey","onClick","NestedForm","NodeForm","forms","Form","newValueForKey","deleteButton","onSubmit","submitButton","current","JSONBlock","data","isSchema","JSON","stringify","FormExample","title","DynamicForm","expandedSchema","onChangeValue","setOnChangeValue","onSubmitValue","setOnSubmitValue","CodeExample","formExamples","Name","Age","Skill","skillName","skillLevel","App","map","ex","AppWrapper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0b11d234.chunk.js","sourcesContent":["export const DynamicFormType = {\n  text: 'DynamicFormType.Text',\n  number: 'DynamicFormType.Number',\n  nested: 'DynamicFormType.Nested',\n  repeatable: 'DynamicFormType.Repeatable'\n}\n","/* eslint-disable no-prototype-builtins */\nimport { DynamicFormType } from './type'\n\nconst schema = (sch) => {\n  const expandedSch = {}\n  for (const [key, schemaForKey] of Object.entries(sch)) {\n    expandedSch[key] = getExpandedSchemaFromKeyAndSchema(key, schemaForKey)\n  }\n\n  return expandedSch\n}\n\nconst getExpandedSchemaFromKeyAndSchema = (key, schemaForKey) => {\n  return {\n    type: getTypeOfSchemaFromSchema(schemaForKey),\n    label: getLabelFromKeyAndSchema(key, schemaForKey),\n    placeholder: schemaForKey.placeholder,\n    defaultValue: getDefaultValueFromKeyAndSchema(schemaForKey),\n    schema: getSubSchemaFromSchema(schemaForKey)\n  }\n}\n\nconst getLabelFromKeyAndSchema = (key, schemaForKey) => {\n  if (schemaForKey.label) return schemaForKey.label\n  return key\n}\n\nconst getDefaultValueFromKeyAndSchema = (sch) => {\n  if (sch.hasOwnProperty('defaultValue')) return sch.defaultValue\n\n  const type = getTypeOfSchemaFromSchema(sch)\n  if (type === DynamicFormType.text && typeof sch === 'string') return sch\n  if (type === DynamicFormType.number && typeof sch === 'number') return sch\n}\n\nconst getTypeOfSchemaFromSchema = (sch) => {\n  if (sch.hasOwnProperty('type')) return sch.type\n\n  if (typeof sch === 'string' || sch === String) return DynamicFormType.text\n  if (typeof sch === 'number' || sch === Number) return DynamicFormType.number\n  if (Array.isArray(sch)) return DynamicFormType.repeatable\n  if (typeof sch === 'object') return DynamicFormType.nested\n}\n\nconst getSubSchemaFromSchema = (sch) => {\n  if (sch.hasOwnProperty('schema')) return schema(sch.schema)\n\n  const type = getTypeOfSchemaFromSchema(sch)\n  if (type === DynamicFormType.nested) return schema(sch)\n  if (type === DynamicFormType.repeatable) return schema(sch[0])\n}\n\nexport { schema }\n","import React, { useState } from 'react'\n\nconst TextyFormType = {\n  text: 'TextyFormType.text',\n  number: 'TextyFormType.number'\n}\n\nexport const StringForm = ({ schema, onChange = () => {} }) => {\n  return (\n    <TextyForm type={TextyFormType.text} schema={schema} onChange={onChange} />\n  )\n}\n\nexport const NumberForm = ({ schema, onChange = () => {} }) => {\n  return (\n    <TextyForm\n      type={TextyFormType.number}\n      schema={schema}\n      onChange={onChange}\n    />\n  )\n}\n\nconst TextyForm = ({ type, schema, onChange = () => {} }) => {\n  // If default value is not availble then use empty string as default value so html will not throw error later.\n  const [value, setValue] = useState(() => {\n    if (schema.defaultValue !== undefined) {\n      onChange(schema.defaultValue)\n      return schema.defaultValue\n    } else {\n      return ''\n    }\n  })\n\n  const changeValue = (newValue) => {\n    const parsedValue =\n      type === TextyFormType.number ? parseInt(newValue) : newValue\n    setValue(parsedValue)\n    if (parsedValue !== undefined) onChange(parsedValue)\n  }\n\n  return (\n    <div className='input-group flex-nowrap'>\n      <span className='input-group-text'> {schema.label} </span>\n      <input\n        type={type === TextyFormType.text ? 'text' : 'number'}\n        className='form-control'\n        placeholder={schema.placeholder}\n        value={value}\n        onChange={(e) => changeValue(e.target.value)}\n      />\n    </div>\n  )\n}\n","const isFunction = (func) => {\n  return typeof func === 'function'\n}\n\nconst uniqueKey = (prefix = '') => {\n  return `${prefix}${new Date().getTime()}`\n}\n\nconst dispatchAsync = (func, timeToFireAfter = 0) => {\n  if (!isFunction(func)) return\n\n  setTimeout(() => {\n    func()\n  }, timeToFireAfter)\n}\n\nexport default {\n  isFunction,\n  uniqueKey,\n  dispatchAsync\n}\n","import React, { useState, useRef } from 'react'\n\nimport { NodeForm } from './NodeForm'\nimport util from '../util'\n\nlet keyIndex = 0\nexport const ReapeatableForm = ({ schema, onChange = () => {} }) => {\n  const [forms, setForms] = useState([])\n  // Value container to store values.\n  const valueContainer = useRef({})\n  // Constant key prefix for children.\n  const keyPrefixContainer = useRef(util.uniqueKey())\n  const keyPrefix = keyPrefixContainer.current\n\n  const deleteFormWithKey = (key) => {\n    setForms((oldForms) => {\n      return oldForms.filter((x) => x.key !== key)\n    })\n  }\n\n  // Changes value for given key in `valueContainer` and passes the information to parent\n  const changeValueForKey = (key, newValue) => {\n    valueContainer.current[key] = newValue\n    onChange(Object.values(valueContainer.current))\n  }\n\n  // Removes value for given key in `valueContainer` and passes the information to parent\n  const removeValueForKey = (key) => {\n    delete valueContainer.current[key]\n    onChange(Object.values(valueContainer.current))\n  }\n\n  const addForm = () => {\n    const newKey = `${keyPrefix + schema.label}_${keyIndex++}`\n    setForms([\n      ...forms,\n      <NodeForm\n        key={newKey}\n        schema={schema.schema}\n        onChange={(newValue) => {\n          changeValueForKey(newKey, newValue)\n        }}\n        onDelete={() => {\n          removeValueForKey(newKey)\n          deleteFormWithKey(newKey)\n        }}\n      />\n    ])\n  }\n\n  // TODO: Add icon to delete button\n  return (\n    <div className='card border-secondary'>\n      <div className='card-header'>{schema.label}</div>\n      <div className='card-body p-1'>\n        {forms}\n        <div className='d-grid'>\n          <button\n            className='btn btn-outline-secondary mx-1 w-auto'\n            onClick={() => {\n              addForm()\n            }}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\nimport { NodeForm } from './NodeForm'\nimport util from '../util'\n\nexport const NestedForm = ({ schema, onChange = () => {} }) => {\n  const changeValue = (newValue) => {\n    if (util.isFunction(onChange)) {\n      onChange(newValue)\n    }\n  }\n\n  // TODO: Add icon to delete button\n  return (\n    <div className='card border-info'>\n      <div className='card-header'>{schema.label}</div>\n      <div className='card-body p-1 d-grid gap-1'>\n        <NodeForm schema={schema.schema} onChange={changeValue} />\n      </div>\n    </div>\n  )\n}\n","import React, { useRef } from 'react'\n\nimport { DynamicFormType } from '../Schema'\nimport { StringForm, NumberForm } from './TextyForm'\nimport { ReapeatableForm } from './RepeatableForm'\nimport { NestedForm } from './NestedForm'\nimport util from '../util'\n\n// TODO: On hover add border\nexport const NodeForm = ({ schema, onChange = () => {}, onDelete }) => {\n  // Value container to store values.\n  const valueContainer = useRef({})\n  // Constant key prefix for children.\n  const keyPrefixContainer = useRef(util.uniqueKey())\n  const keyPrefix = keyPrefixContainer.current\n\n  const changeValue = (key, newValueForKey) => {\n    const value = valueContainer.current\n    value[key] = newValueForKey\n    if (util.isFunction(onChange)) {\n      onChange({ ...value })\n    }\n  }\n\n  // Iterate through schema and get each form type.\n  const forms = []\n  for (const [key, schemaForKey] of Object.entries(schema)) {\n    let Form\n    if (schemaForKey.type === DynamicFormType.text) {\n      Form = StringForm\n    } else if (schemaForKey.type === DynamicFormType.number) {\n      Form = NumberForm\n    } else if (schemaForKey.type === DynamicFormType.nested) {\n      Form = NestedForm\n    } else if (schemaForKey.type === DynamicFormType.repeatable) {\n      Form = ReapeatableForm\n    }\n\n    forms.push(\n      <Form\n        key={keyPrefix + key}\n        schema={schemaForKey}\n        onChange={(newValueForKey) => {\n          changeValue(key, newValueForKey)\n        }}\n      />\n    )\n  }\n\n  let deleteButton\n  if (util.isFunction(onDelete)) {\n    deleteButton = (\n      <div className=''>\n        <button\n          className='btn btn-outline-danger w-20'\n          onClick={() => {\n            onDelete()\n          }}\n        >\n          Delete\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div className='card border-light'>\n      <div className='card-body p-1 d-grid gap-1'>\n        {forms}\n        {deleteButton}\n      </div>\n    </div>\n  )\n}\n","import { DynamicForm } from './DynamicForm'\nimport { DynamicFormType, schema } from './Schema'\n\nexport default {\n  Form: DynamicForm,\n  type: DynamicFormType,\n  schema\n}\n","import React, { useRef } from 'react'\n\nimport { NodeForm } from './NodeForm'\nimport util from '../util'\n\n// TODO: Add test for keys with large schema.\nexport const DynamicForm = ({ schema = {}, onChange = () => {}, onSubmit }) => {\n  // Value container to store values.\n  const valueContainer = useRef({})\n  const changeValue = (newValue) => {\n    valueContainer.current = newValue\n\n    // Update out function that value is changed.\n    if (util.isFunction(onChange)) {\n      util.dispatchAsync(() => {\n        onChange({ ...valueContainer.current })\n      })\n    }\n  }\n\n  let submitButton\n  if (util.isFunction(onSubmit)) {\n    submitButton = (\n      <button\n        className='btn btn-success mx-1 w-auto '\n        onClick={() => {\n          onSubmit({ ...valueContainer.current })\n        }}\n      >\n        Submit\n      </button>\n    )\n  }\n\n  return (\n    <div className='d-grid gap-1'>\n      <NodeForm\n        schema={schema}\n        onChange={(newValue) => {\n          changeValue(newValue)\n        }}\n      />\n      {submitButton}\n    </div>\n  )\n}\n","import React, { useState } from 'react'\n\nimport DynamicForm from 'dynamic-form'\n\nconst JSONBlock = ({ type, data, isSchema }) => {\n  const className = isSchema\n    ? 'card-body rounded text-white bg-dark'\n    : 'card-body rounded border'\n  return (\n    <div className={className}>\n      <pre>\n        <code>\n          {type} = {JSON.stringify(data, null, 2)}\n        </code>\n      </pre>\n    </div>\n  )\n}\n\nconst FormExample = ({ title, schema }) => {\n  const [expandedSchema] = useState(() => DynamicForm.schema(schema))\n  const [onChangeValue, setOnChangeValue] = useState({})\n  const [onSubmitValue, setOnSubmitValue] = useState({})\n\n  return (\n    <div className='container'>\n      <h4 className='display-4'>{title}</h4>\n      <div className='row gy-2'>\n        <div className='col-12 col-md-4'>\n          <div className='row mb-2'>\n            <JSONBlock type='minimal' data={schema} isSchema />\n          </div>\n          <div className='row'>\n            <JSONBlock type='expanded' data={expandedSchema} isSchema />\n          </div>\n        </div>\n\n        <div className='col-12 col-md-4'>\n          <div className='card-body rounded border border-primary'>\n            <DynamicForm.Form\n              schema={expandedSchema}\n              onChange={(value) => setOnChangeValue(value)}\n              onSubmit={(value) => setOnSubmitValue(value)}\n            />\n          </div>\n        </div>\n\n        <div className='col-12 col-md-4'>\n          <div className='row mb-2'>\n            <JSONBlock type='onChange' data={onChangeValue} />\n          </div>\n          <div className='row'>\n            <JSONBlock type='onSubmit' data={onSubmitValue} />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default FormExample\n","import React from 'react'\n\n// TODO: Add hooks examples\nconst code = `// CODE EXAMPLE  \nimport DynamicForm from '@rational-kunal/dynamic-form'\n\nconst NameForm = () => {\n    const schema = DynamicForm.schema({\n        \"Name\": String\n    })\n\n    return <DynamicForm schema={schema} />\n}\n`\n\nconst CodeExample = () => {\n  return (\n    <div className='card-body rounded text-white bg-dark'>\n      <pre>\n        <code>{code}</code>\n      </pre>\n    </div>\n  )\n}\n\nexport default CodeExample\n","import React from 'react'\n\nimport DynamicForm from 'dynamic-form'\nimport FormExample from './components/FormExample'\nimport CodeExample from './components/CodeExample'\n\nconst formExamples = [\n  { title: 'String Form', schema: { Name: 'John Doe' } },\n  { title: 'Number Form', schema: { Age: 21 } },\n  {\n    title: 'Nested Form',\n    schema: {\n      'Personal Information': {\n        Name: 'John Doe',\n        Age: 21\n      }\n    }\n  },\n  {\n    title: 'Reapeted Form',\n    schema: {\n      Skill: [\n        {\n          skillName: {\n            label: 'Skill',\n            type: DynamicForm.type.text,\n            placeholder: 'skill'\n          },\n          skillLevel: {\n            label: 'Skill level',\n            type: DynamicForm.type.number,\n            placeholder: 'level'\n          }\n        }\n      ]\n    }\n  }\n]\n\nconst App = () => {\n  return (\n    <div>\n      <div className='mb-4'>\n        <CodeExample />\n      </div>\n      {formExamples.map((ex) => (\n        <div className='mb-4'>\n          <FormExample key={ex.title} title={ex.title} schema={ex.schema} />\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst AppWrapper = () => {\n  return (\n    <div className='container my-4'>\n      <App />\n    </div>\n  )\n}\n\nexport default AppWrapper\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}