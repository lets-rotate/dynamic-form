{"version":3,"sources":["../../src/DynamicForm/TextyForm.js","../../src/DynamicForm/RepeatableForm.js","../../src/DynamicForm/NestedForm.js","../../src/DynamicForm/NodeForm.js","../../src/DynamicForm/index.js","App.js","index.js"],"names":["TextyFormType","StringForm","onChange","type","schema","NumberForm","TextyForm","useState","useEffect","value","className","placeholder","e","setValue","aria-label","aria-describedby","keyIndex","ReapeatableForm","addForm","newKey","label","setForms","key","newValue","changeValue","onDelete","deleteFormWithKey","oldForms","x","oldValue","Object","onClick","NestedForm","NodeForm","newValueForKey","forms","schemaForKey","DynamicFormType","deleteButton","DynamicForm","onSubmit","submitButton","text","number","nested","repeatable","App","personalSchema","presonalName","personalEmail","age","skillSchema","skillName","skillLevel","defaultValue","personal","skills","JSON","stringify","AppWrapper","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e03c28ac.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst TextyFormType = {\n  text: 'TextyFormType.text',\n  number: 'TextyFormType.number'\n}\n\nexport const StringForm = ({ schema, onChange = () => {} }) => {\n  return (\n    <TextyForm type={TextyFormType.text} schema={schema} onChange={onChange} />\n  )\n}\n\nexport const NumberForm = ({ schema, onChange }) => {\n  return (\n    <TextyForm\n      type={TextyFormType.number}\n      schema={schema}\n      onChange={onChange}\n    />\n  )\n}\n\nconst TextyForm = ({ type, schema, onChange }) => {\n  const [value, setValue] = useState(schema.defaultValue)\n\n  useEffect(() => {\n    if (value !== undefined) onChange(value)\n  }, [value])\n\n  return (\n    <div className='input-group flex-nowrap'>\n      <span className='input-group-text'> {schema.label} </span>\n      <input\n        type={type === TextyFormType.text ? 'text' : 'number'}\n        className='form-control'\n        placeholder={schema.placeholder}\n        value={value}\n        onChange={(e) => {\n          setValue(e.target.value)\n        }}\n        aria-label='Username'\n        aria-describedby='addon-wrapping'\n      />\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { NodeForm } from './NodeForm'\n\nlet keyIndex = 0\nexport const ReapeatableForm = ({ schema, onChange = () => {} }) => {\n  const [forms, setForms] = useState([])\n  const [value, setValue] = useState({})\n  const deleteFormWithKey = (key) => {\n    setForms((oldForms) => {\n      return oldForms.filter((x) => x.key !== key)\n    })\n  }\n\n  const addForm = () => {\n    const newKey = `${schema.label}_${keyIndex++}`\n    setForms([\n      ...forms,\n      <NodeForm\n        key={newKey}\n        schema={schema.schema}\n        onChange={(newValue) => {\n          changeValue(newKey, newValue)\n        }}\n        onDelete={() => {\n          deleteFormWithKey(newKey)\n          changeValue(newKey, null)\n        }}\n      />\n    ])\n  }\n\n  const changeValue = (key, newValue) => {\n    setValue((oldValue) => {\n      if (newValue) oldValue[key] = newValue\n      else delete oldValue[key] // TODO: Check if it is safe to use delete.\n      return { ...oldValue }\n    })\n  }\n\n  useEffect(() => {\n    onChange([...Object.values(value)])\n  }, [value])\n\n  // TODO: Add icon to delete button\n  return (\n    <div className='card border-secondary'>\n      <div className='card-header'>{schema.label}</div>\n      <div className='card-body p-1'>\n        {forms}\n        <div className='d-grid'>\n          <button\n            className='btn btn-outline-secondary mx-1 w-auto'\n            onClick={() => {\n              addForm()\n            }}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react'\n\nimport { NodeForm } from './NodeForm'\n\nexport const NestedForm = ({ schema, onChange = () => {} }) => {\n  const [value, setValue] = useState({})\n\n  const changeValue = (newValue) => {\n    setValue(newValue)\n  }\n\n  useEffect(() => {\n    onChange(value)\n  }, [value])\n\n  // TODO: Add icon to delete button\n  return (\n    <div className='card border-info'>\n      <div className='card-header'>{schema.label}</div>\n      <div className='card-body p-1 d-grid gap-1'>\n        <NodeForm schema={schema.schema} onChange={changeValue} />\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { DynamicFormType } from '.'\nimport { StringForm, NumberForm } from './TextyForm'\nimport { ReapeatableForm } from './RepeatableForm'\nimport { NestedForm } from './NestedForm'\n\n// TODO: Handle keys better.\n// TODO: On hover add border\n// TODO: Better way to consistently handle if function then execute i.e. `typeof onChange === 'function'`\nexport const NodeForm = ({ schema, onChange = () => {}, onDelete }) => {\n  const [value, setValue] = useState({})\n  const changeValue = (key, newValueForKey) => {\n    setValue((oldValue) => {\n      oldValue[key] = newValueForKey\n      return { ...oldValue }\n    })\n  }\n\n  useEffect(() => {\n    if (typeof onChange === 'function') onChange(value)\n  }, [value])\n\n  // Iterate through schema and get each form type.\n  const forms = []\n  for (const [key, schemaForKey] of Object.entries(schema)) {\n    if (schemaForKey.type === DynamicFormType.text) {\n      forms.push(\n        <StringForm\n          key={key}\n          schema={schemaForKey}\n          onChange={(newValueForKey) => {\n            changeValue(key, newValueForKey)\n          }}\n        />\n      )\n    } else if (schemaForKey.type === DynamicFormType.number) {\n      forms.push(\n        <NumberForm\n          key={key}\n          schema={schemaForKey}\n          onChange={(newValueForKey) => {\n            changeValue(key, newValueForKey)\n          }}\n        />\n      )\n    } else if (schemaForKey.type === DynamicFormType.nested) {\n      forms.push(\n        <NestedForm\n          key={key}\n          schema={schemaForKey}\n          onChange={(newValueForKey) => {\n            changeValue(key, newValueForKey)\n          }}\n        />\n      )\n    } else if (schemaForKey.type === DynamicFormType.repeatable) {\n      forms.push(\n        <ReapeatableForm\n          key={key}\n          schema={schemaForKey}\n          onChange={(newValueForKey) => {\n            changeValue(key, newValueForKey)\n          }}\n        />\n      )\n    }\n  }\n\n  let deleteButton\n  if (onDelete) {\n    deleteButton = (\n      <div className=''>\n        <button\n          className='btn btn-outline-danger w-20'\n          onClick={() => {\n            onDelete()\n          }}\n        >\n          Delete\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div className='card border-light'>\n      <div className='card-body p-1 d-grid gap-1'>\n        {forms}\n        {deleteButton}\n      </div>\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\n\nimport { NodeForm } from './NodeForm'\n\n// TODO: Handle keys better.\n// TODO: Better way to consistently handle if function then execute i.e. `typeof onChange === 'function'`\nexport const DynamicForm = ({ schema = {}, onChange = () => {}, onSubmit }) => {\n  const [value, setValue] = useState({})\n  const changeValue = (newValue) => {\n    setValue(newValue)\n  }\n\n  useEffect(() => {\n    onChange(value)\n  }, [value])\n\n  let submitButton\n  if (onSubmit) {\n    submitButton = (\n      <button\n        className='btn btn-success mx-1 w-auto '\n        onClick={() => {\n          if (typeof onSubmit === 'function') onSubmit({ ...value })\n        }}\n      >\n        Submit\n      </button>\n    )\n  }\n\n  return (\n    <div className='d-grid gap-1'>\n      <NodeForm\n        schema={schema}\n        onChange={(newValue) => {\n          changeValue(newValue)\n        }}\n      />\n      {submitButton}\n    </div>\n  )\n}\n\nexport const DynamicFormType = {\n  text: 'DynamicFormType.Text',\n  number: 'DynamicFormType.Number',\n  nested: 'DynamicFormType.Nested',\n  repeatable: 'DynamicFormType.Repeatable'\n}\n","import React, { useState } from 'react'\n\nimport { DynamicForm, DynamicFormType } from 'dynamic-form'\nimport 'dynamic-form/dist/index.css'\n\nconst App = () => {\n  const [value, setValue] = useState({})\n  const personalSchema = {\n    presonalName: {\n      label: 'Name',\n      type: DynamicFormType.text,\n      placeholder: 'Full name'\n    },\n    personalEmail: {\n      label: 'Email',\n      type: DynamicFormType.text,\n      placeholder: 'Email address'\n    },\n    age: {\n      label: 'Age',\n      type: DynamicFormType.number,\n      placeholder: 'Age'\n    }\n  }\n\n  const skillSchema = {\n    skillName: {\n      label: 'Skill',\n      type: DynamicFormType.text,\n      placeholder: 'Skill'\n    },\n    skillLevel: {\n      label: 'Skill lavel',\n      type: DynamicFormType.number,\n      defaultValue: 0\n    }\n  }\n\n  const schema = {\n    personal: {\n      label: 'Personal information',\n      type: DynamicFormType.nested,\n      schema: personalSchema\n    },\n    skills: {\n      label: 'Skills',\n      type: DynamicFormType.repeatable,\n      schema: skillSchema\n    }\n  }\n\n  return (\n    <div className='card border-light'>\n      <div className='row card-body'>\n        <div className='col p-1'>\n          <div className='rounded text-white-50 bg-dark p-2'>\n            <pre>\n              <code>schema = {JSON.stringify(schema, null, 2)}</code>\n            </pre>\n          </div>\n        </div>\n        <div className='col'>\n          <DynamicForm\n            schema={schema}\n            onChange={(newValue) => setValue(newValue)}\n          />\n        </div>\n        <div className='col p-1'>\n          <pre>\n            <code className='fw-bold'>\n              onChange = {JSON.stringify(value, null, 2)}\n            </code>\n          </pre>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst AppWrapper = () => {\n  return (\n    <div className='container my-4'>\n      <App />\n    </div>\n  )\n}\n\nexport default AppWrapper\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}